
------------------------------------------------------------------------------
--                                                                          --
--                            GPR PROJECT PARSER                            --
--                                                                          --
--            Copyright (C) 2015-2022, Free Software Foundation, Inc.       --
--                                                                          --
-- This library is free software;  you can redistribute it and/or modify it --
-- under terms of the  GNU General Public License  as published by the Free --
-- Software  Foundation;  either version 3,  or (at your  option) any later --
-- version. This library is distributed in the hope that it will be useful, --
-- but WITHOUT ANY WARRANTY;  without even the implied warranty of MERCHAN- --
-- TABILITY or FITNESS FOR A PARTICULAR PURPOSE.                            --
--                                                                          --
-- As a special exception under Section 7 of GPL version 3, you are granted --
-- additional permissions described in the GCC Runtime Library Exception,   --
-- version 3.1, as published by the Free Software Foundation.               --
--                                                                          --
-- You should have received a copy of the GNU General Public License and    --
-- a copy of the GCC Runtime Library Exception along with this program;     --
-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
-- <http://www.gnu.org/licenses/>.                                          --
--                                                                          --
------------------------------------------------------------------------------

--  DO NOT EDIT THIS IS AN AUTOGENERATED FILE




with Gpr_Parser.Common; use Gpr_Parser.Common;

private package Gpr_Parser.Lexer_State_Machine is

   use Support.Text;

   type Lexer_State is limited private;

   type Lexed_Token is record
      Kind : Token_Kind;
      --  Kind for the scanned token

      Text_First : Positive;
      Text_Last  : Natural;
      --  Index range in the lexer input for the text covered by this token
   end record;

   procedure Initialize
     (Self        : out Lexer_State;
      Input       : Text_Access;
      Input_First : Positive;
      Input_Last  : Natural);
   --  Create a lexer state to scan the given input. Self will keep a reference
   --  to Input to be used for each call to Next_Token, so the caller must keep
   --  it point to allocated memory.

   function Last_Token (Self : Lexer_State) return Lexed_Token;
   --  Return the last token that Self scanned. This is the termination token
   --  with the Input'First - 1 .. Input'Last index range when Next_Token
   --  wasn't called yet.

   function Has_Next (Self : Lexer_State) return Boolean;
   --  Return whether Self scanned the whole input buffer

   procedure Next_Token
     (Self : in out Lexer_State; Token : out Lexed_Token)
      with Pre => Has_Next (Self);
   --  Scan for the next token in Self. Store its kind and index range in the
   --  Input respectively in Kind, Text_First and Text_Last.

private

   type Lexer_State is limited record
      Input       : Text_Access;
      Input_First : Positive;
      Input_Last  : Natural;
      --  Input buffer and buffer bounds for the content to scan

      Has_Next   : Boolean;
      Last_Token : Lexed_Token;

      Last_Token_Kind : Token_Kind;
      --  Kind of the last actual token (not trivia) emitted
   end record;

end Gpr_Parser.Lexer_State_Machine;
