procedure Test_Gamma is
      Step    : constant Float_Type := 0.1;
      Start   : constant Float_Type := 0.1;
      Stop    : constant Float_Type := 10.0;
      X       : Float_Type;
      Err     : Float_Type;
      Max_Err : Float_Type;

      Expected : constant Float_Array :=
                   (
                    9.5135076986687306e+00,
                    4.5908437119988026e+00,
                    2.9915689876875904e+00,
                    2.2181595437576882e+00,
                    1.7724538509055161e+00,
                    1.4891922488128171e+00,
                    1.2980553326475577e+00,
                    1.1642297137253033e+00,
                    1.0686287021193193e+00,
                    1.0000000000000000e+00,
                    9.5135076986687317e-01,
                    9.1816874239976054e-01,
                    8.9747069630627718e-01,
                    8.8726381750307526e-01,
                    8.8622692545275805e-01,
                    8.9351534928769027e-01,
                    9.0863873285329044e-01,
                    9.3138377098024272e-01,
                    9.6176583190738751e-01,
                    1.0000000000000000e+00,
                    1.0464858468535605e+00,
                    1.1018024908797128e+00,
                    1.1667119051981605e+00,
                    1.2421693445043056e+00,
                    1.3293403881791375e+00,
                    1.4296245588603045e+00,
                    1.5446858458505939e+00,
                    1.6764907877644371e+00,
                    1.8273550806240366e+00,
                    2.0000000000000009e+00,
                    2.1976202783924772e+00,
                    2.4239654799353683e+00,
                    2.6834373819557698e+00,
                    2.9812064268103340e+00,
                    3.3233509704478439e+00,
                    3.7170238530367916e+00,
                    4.1706517837966040e+00,
                    4.6941742057404241e+00,
                    5.2993297338097065e+00,
                    6.0000000000000000e+00,
                    6.8126228630166761e+00,
                    7.7566895357931793e+00,
                    8.8553433604540341e+00,
                    1.0136101851155125e+01,
                    1.1631728396567450e+01,
                    1.3381285870932444e+01,
                    1.5431411600047435e+01,
                    1.7837861981813603e+01,
                    2.0667385961857857e+01,
                    2.4000000000000000e+01,
                    2.7931753738368364e+01,
                    3.2578096050331347e+01,
                    3.8077976449952345e+01,
                    4.4598848145082606e+01,
                    5.2342777784553519e+01,
                    6.1553915006289238e+01,
                    7.2527634520222932e+01,
                    8.5621737512705295e+01,
                    1.0127019121310350e+02,
                    1.2000000000000000e+02,
                    1.4245194406567865e+02,
                    1.6940609946172304e+02,
                    2.0181327518474743e+02,
                    2.4083377998344608e+02,
                    2.8788527781504433e+02,
                    3.4470192403521969e+02,
                    4.1340751676527083e+02,
                    4.9660607757369075e+02,
                    5.9749412815731080e+02,
                    7.1999999999999989e+02,
                    8.6895685880063968e+02,
                    1.0503178166626831e+03,
                    1.2714236336639085e+03,
                    1.5413361918940552e+03,
                    1.8712543057977880e+03,
                    2.2750326986324494e+03,
                    2.7698303623273150e+03,
                    3.3769213275010966e+03,
                    4.1227094842854449e+03,
                    5.0399999999999991e+03,
                    6.1695936974845408e+03,
                    7.5622882799713034e+03,
                    9.2813925257465507e+03,
                    1.1405887820016011e+04,
                    1.4034407293483411e+04,
                    1.7290248509606619e+04,
                    2.1327693789920286e+04,
                    2.6339986354508605e+04,
                    3.2569404925855015e+04,
                    4.0319999999999993e+04,
                    4.9973708949624786e+04,
                    6.2010763895764685e+04,
                    7.7035557963696367e+04,
                    9.5809457688134498e+04,
                    1.1929246199460900e+05,
                    1.4869613718261689e+05,
                    1.8555093597230720e+05,
                    2.3179187991967573e+05,
                    2.8986770384010964e+05,
                    3.6287999999999994e+05
                   );

      Verbose : constant Boolean := True;
      Cursor  : Positive;
   begin
      X := Start;
      Cursor := Expected'First;
      Max_Err := 0.0;

      while X <= Stop loop
         Err := abs (Expected (Cursor) - Gamma (X)) / Expected (Cursor);
         Max_Err := Float_Type'Max (Max_Err, Err);

         if Verbose then
            Put_Line (X'Image & " " & Gamma (X)'Image & " " & Expected (Cursor)'Image & " " & Err'Image);
         end if;

         X := X + Step;
         Cursor := Cursor + 1;
      end loop;

      Put_Line ("gamma: " & Max_Err'Image);
   end Test_Gamma;
   pragma Unreferenced (Test_Gamma);
