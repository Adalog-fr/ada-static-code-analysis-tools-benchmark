import { basename, join, dirname } from "jsr:@std/path@^0.225.1";
import { Command } from "https://deno.land/x/cmd@v1.2.0/mod.ts";
import * as dotenv from "jsr:@std/dotenv@^0.225.1";
import { filterCompleteCrates, createBlock, getCogralysEnginePath } from "../utils.ts";
import { ExtendedGPRProject, UnifiedCrateData } from "../types.ts";
import { COGRALYS_DIR_NAME, PROJECT_ROOT } from "../../config.ts";
import type { LanguageSummary } from "../scc-types.ts";

// Get default cogralys engine path
let defaultCogralysEnginePath = "";
try {
    defaultCogralysEnginePath = getCogralysEnginePath()
} catch (_) {
    defaultCogralysEnginePath = "NOT FOUND"
}

type finalProjectArrayType = [ExtendedGPRProject, Omit<LanguageSummary, "Files">][];
type optionsType = { cratesPath: string, execPath: string, log4jSettingsPath: string };

export function initializeModule(program: Command, settings: {
    commandName: string,
    description: string,
    command?: string[],
    ruleFile?: string,
    isCogralys?: boolean
}): void {
    const benchmarkType = settings.commandName.replace("bench-", "");

    program
        .command(settings.commandName)
        .description(settings.description)
        .option("-e, --execPath <path>", "Path to cogralys bin/exec file", defaultCogralysEnginePath)
        .option("-l, --log4jSettingsPath <path>", "Path to log4j settings", "$PROJECT_ROOT/rootfs/home/bin/log4j.properties")
        .action((options: optionsType) => {
            if (settings.isCogralys) {
                options.execPath = getCogralysEnginePath(options.execPath);
            }
            const crates: UnifiedCrateData = JSON.parse(Deno.readTextFileSync(join(PROJECT_ROOT, "cratesDB.json")));
            const projects: ExtendedGPRProject[] = filterCompleteCrates(crates.crates);
            let finalProjects: finalProjectArrayType = [];

            for (const project of projects) {
                let sccMetrics: Omit<LanguageSummary, "Files">;
                try {
                    const { Files: _, ...scc} = JSON.parse(Deno.readTextFileSync(join(PROJECT_ROOT, dirname(project.gprPath), basename(project.gprPath, ".gpr") + "_scc-metrics.json"))) as LanguageSummary;
                    sccMetrics = scc;
                } catch (e) {
                    console.log(`Skip ${project.crateName} > ${project.alireTomlPath} > ${project.gprPath} due to the following error: `, e);
                    continue;
                }
                finalProjects.push([project, sccMetrics])
            }

            // Generate projects array based on benchmark type
            const projectsScript = settings.isCogralys ?
                generateCogralysProjectsScript(finalProjects, options, benchmarkType) :
                generateStandardProjectsScript(finalProjects, settings.command!, benchmarkType);

            Deno.writeTextFileSync(
                join(PROJECT_ROOT, `${benchmarkType}_projects.sh`),
                projectsScript
            );
        });
}

function generateStandardProjectsScript(projects: finalProjectArrayType, command: string[], benchmarkType: string): string {
    let script = "#!/bin/bash\n\n";
    script += createBlock("WARNING: DO NOT EDIT THIS FILE MANUALLY\n" +
        `This file is generated by: cogralys-bench-util bench-${benchmarkType}`) + "\n\n";
    script += "projects=(\n";

    for (const [project, scc] of projects) {
        const finalCommandArr = command
            .map(item => item.replace(/%PRJ%/g, "$PROJECT_ROOT/" + project.gprPath))
            .map(item => item.replace(/%UNITS%/g, "$PROJECT_ROOT/" + project.gprPath.replace(".gpr", ".units")))
            .map(item => item.replace(/%UNITS_BY_FILENAME%/g, "$PROJECT_ROOT/" + project.gprPath.replace(".gpr", ".units_by_filename")))
            .map(item => item.replace(/%UNITS_BY_PATH%/g, "$PROJECT_ROOT/" + project.gprPath.replace(".gpr", ".units_by_path")))
            .map(item => item.replace(/%PRJ_NAME%/g, basename(project.gprPath, ".gpr")))
            .map(item => item.replace(/%EXTRA_ARGS%/g, "$extraArgs"));
        const finalCommand = JSON.stringify({
            path: `$PROJECT_ROOT/${project.alireTomlPath}`,
            command: [
                "alr",
                ["exec", "--", ...finalCommandArr, {}],
            ]
        }).replace(/"/g, '\\"');
            // .join(" ");

        script += `    "${project.crateName}|${project.alireTomlPath}|${project.gprPath}|${finalCommand}|${scc.Code}"\n`;
    }

    script += ")\n";
    return script;
}

function generateCogralysProjectsScript(projects: finalProjectArrayType, options: optionsType, benchmarkType: string): string {
    let script = "#!/bin/bash\n\n";
    script += createBlock("WARNING: DO NOT EDIT THIS FILE MANUALLY\n" +
                          `This file is generated with: cogralys-bench-util bench-${benchmarkType}`) + "\n\n";
    script += "projects=(\n";

    for (const [project, scc] of projects) {
        const cogralysInitArgs = JSON.stringify({
            path: `$PROJECT_ROOT/${project.alireTomlPath}`,
            command: [
                `${options.execPath}`,
                ["-dvx", "-p", `$PROJECT_ROOT/${project.gprPath}`,
                 `@$PROJECT_ROOT/${project.gprPath.replace(".gpr", ".units")}`],
                {
                    env: {
                        ...dotenv.loadSync({
                            envPath: `$PROJECT_ROOT/${project.alireTomlPath}/.env`,
                        }),
                        DRY_RUN: "True",
                        LOGGER_CONFIG: `${options.log4jSettingsPath}`,
                        NEO4J_RESULT_DIR: `.${basename(project.gprPath, ".gpr")}/${COGRALYS_DIR_NAME}`,
                        NEO4J_HOST: "$NEO4J_HOST"
                    }
                }
            ]
        }).replace(/"/g, '\\"');

        script += `    "${project.crateName}|${project.alireTomlPath}|${project.gprPath}|${cogralysInitArgs}|${scc.Code}"\n`;
    }

    script += ")\n";
    return script;
}
